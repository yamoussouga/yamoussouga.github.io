1. Using Get-FileHash Cmdlet
The Get-FileHash cmdlet computes the hash value of a file. You can compare this hash with the expected value.

# Calculate the hash of the file
$FilePath = "C:\Path\To\Your\File.txt"
$HashAlgorithm = "SHA256"  # You can use MD5, SHA1, SHA256, etc.
$FileHash = Get-FileHash -Path $FilePath -Algorithm $HashAlgorithm

# Display the hash
$FileHash.Hash
Compare the output hash with the expected hash manually or programmatically.

2. Automating the Comparison
You can automate the comparison to verify integrity:

# Known hash value (replace with the actual hash)
$ExpectedHash = "ABC123DEF456..."

# Calculate the file's hash
$FileHash = Get-FileHash -Path "C:\Path\To\Your\File.txt" -Algorithm SHA256

# Compare the hashes
if ($FileHash.Hash -eq $ExpectedHash) {
    Write-Output "File integrity verified. The file is intact."
} else {
    Write-Output "File integrity check failed. The file may be corrupted or altered."
}
3. Verifying Multiple Files
For verifying multiple files in a folder:

# Folder path and expected hashes
$FolderPath = "C:\Path\To\Your\Folder"
$ExpectedHashes = @{
    "File1.txt" = "ABC123DEF456...";
    "File2.txt" = "XYZ789GHI012...";
}

# Loop through files and verify
Get-ChildItem -Path $FolderPath -File | ForEach-Object {
    $FileHash = Get-FileHash -Path $_.FullName -Algorithm SHA256
    if ($FileHash.Hash -eq $ExpectedHashes[$_.Name]) {
        Write-Output "$($_.Name): Integrity verified."
    } else {
        Write-Output "$($_.Name): Integrity check failed."
    }

//====================================================================================================================================================================================

You can verify file integrity in PowerShell using cmdlets like Get-FileHash, New-FileCatalog, and Test-FileCatalog to calculate hashes and validate file changes.
Using Get-FileHash
Calculate the Hash: The Get-FileHash cmdlet computes the hash value for a file using a specified algorithm (default is SHA-256). This is useful for checking if a file has been altered.
Get-FileHash -Path "C:\path\to\your\file.txt" -Algorithm SHA256
Compare Hashes: After calculating the hash, compare it with a known good hash value. If they match, the file is intact; if not, it may have been modified or corrupted. 

1 Source
Using File Catalogs
Create a File Catalog: Use the New-FileCatalog cmdlet to create a catalog of files, capturing their names and hashes.
New-FileCatalog -Path "C:\path\to\directory" -CatalogPath "C:\path\to\catalog.xml"
Validate the Catalog: Later, use the Test-FileCatalog cmdlet to compare the current files against the catalog to check for any changes.
Test-FileCatalog -CatalogPath "C:\path\to\catalog.xml"
This will indicate if any files have been added, removed, or modified. 
PowerShell Cookbook
Using PsFCIV Module
Install PsFCIV: This module enhances file integrity verification and can hash files or folders using various algorithms (MD5, SHA1, SHA2). It can also compare current file states against a stored database.
Install-Module -Name PsFCIV
Import-Module PsFCIV
Check File Integrity: Use the module to check files against a database or perform one-time hash calculations. 

1 Source
Monitoring File Integrity
File Integrity Monitor Script: You can create a PowerShell script to monitor file integrity by calculating hashes and alerting you to any changes. This can help detect silent corruption before it becomes a problem. 

By using these methods, you can effectively verify the integrity of files in your system using PowerShell, ensuring that your data remains secure and unaltered.
