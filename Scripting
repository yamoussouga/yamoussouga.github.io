

:)kwd[SECTION=BATCH](:

:)kwd[sources links batch]
https://www.tutorialspoint.com/batch_script/batch_script_strings.htm
batch related (https://www.wikihow.com/Delay-a-Batch-File)
(:

:)kwd[batch]
::Deletes all files in the current directory with prompt and warnings
::Hidden, System, and Read-only files are not affected.
::&commat; ECHO OFF with '@' for one line only or 
	@ECHO OFF for the entire file
	DEL . DR
(:

:)kwd[environment variable]
append the string 'C:\Application\bin' to the end of the system variable PATH.
(:

:)kwd[Batch commands]
#Batch Script commands
VER,
ASSOC,
VER
This batch command shows the version of MS-DOS you are using.
ASSOC
This is a batch command that associates an extension with a file type (FTYPE), displays existing associations, or deletes an association.
CD
This batch command helps in making changes to a different directory, or displays the current directory.
CLS
This batch command clears the screen.
COPY
This batch command is used for copying files from one location to the other.
DEL
This batch command deletes files and not directories.
DIR
This batch command lists the contents of a directory.
DATE
This batch command help to find the system date.
ECHO
This batch command displays messages, or turns command echoing on or off.
EXIT
This batch command exits the DOS console.
MD
This batch command creates a new directory in the current location.
MOVE
This batch command moves files or directories between directories.
PATH
This batch command displays or sets the path variable.
PAUSE
This batch command prompts the user and waits for a line of input to be entered.
PROMPT
This batch command can be used to change or reset the cmd.exe prompt.
RD
This batch command removes directories, but the directories need to be empty before they can be removed.
REN
Renames files and directories
REM
This batch command is used for remarks in batch files, preventing the content of the remark from being executed.
START
This batch command starts a program in new window, or opens a document.
TIME
This batch command sets or displays the time.
TYPE
This batch command prints the content of a file or files to the output.
VOL
This batch command displays the volume labels.
ATTRIB
Displays or sets the attributes of the files in the curret directory
CHKDSK
This batch command checks the disk for any problems.
CHOICE
This batch command provides a list of options to the user.
CMD
This batch command invokes another instance of command prompt.
COMP
This batch command compares 2 files based on the file size.
CONVERT
This batch command converts a volume from FAT16 or FAT32 file system to NTFS file system.
DRIVERQUERY
This batch command shows all installed device drivers and their properties.
EXPAND
This batch command extracts files from compressed .cab cabinet files.
FIND
This batch command searches for a string in files or input, outputting matching lines.
FORMAT
This batch command formats a disk to use Windows-supported file system such as FAT, FAT32 or NTFS, thereby overwriting the previous content of the disk.
HELP
This batch command shows the list of Windows-supplied commands.
IPCONFIG
This batch command displays Windows IP Configuration. Shows configuration by connection and the name of that connection.
LABEL
This batch command adds, sets or removes a disk label.
MORE
This batch command displays the contents of a file or files, one screen at a time.
NET
Provides various network services, depending on the command used.
PING
This batch command sends ICMP/IP "echo" packets over the network to the designated address.
SHUTDOWN
This batch command shuts down a computer, or logs off the current user.
SORT
This batch command takes the input from a source file and sorts its contents alphabetically, from A to Z or Z to A. It prints the output on the console.
SUBST
This batch command assigns a drive letter to a local folder, displays current assignments, or removes an assignment.
SYSTEMINFO
This batch command shows configuration of a computer and its operating system.
TASKKILL
This batch command ends one or more tasks.
TASKLIST
This batch command lists tasks, including task name and process id (PID).
XCOPY
This batch command copies files and directories in a more advanced way.
TREE
This batch command displays a tree of all subdirectories of the current directory to any level of recursion or depth.
FC
This batch command lists the actual differences between two files.
DISKPART
This batch command shows and configures the properties of disk partitions.
TITLE
This batch command sets the title displayed in the console window.
SET
Displays the list of environment variables on the current system.
(:

:)kwd[]
ASSOC | FIND .ext (displays only those file extensions which have the extension .ext)
#example:
&commat;echo off
assoc > C:\lists.txt
assoc | find .doc > C:\listsdoc.txt

<.ext>	Specifies the file name extension.
<filetype> Specifies the file type to associate with the specified file name extension.
/?	Displays help at the command prompt.

assoc [<.[ext]>[=[<filetype>]]]

To view the current file type association for the file name extension .txt, type:
assoc .txt

To remove the file type association for the file name extension .bak, type:
assoc .bak=
Make sure you add a space after the equal sign.

To view the output of assoc one screen at a time, type:
assoc | more

To send the output of assoc to the file assoc.txt, type:
assoc>assoc.txt

Associate .log to text files:
assoc .log=txtfile

Associate files with no extension to text files:
assoc .=txtfile
(:


:)kwd[Batch file]
#
(:


:)kwd[string manipulation in Batch file]
#Create String
A string can be created in DOS in the following way.
SET v_str= get it together!
echo %v_str%

#Empty String
SET v_empty_str= 

#String Interpolation
String interpolation is a way to construct a new String value from a mix of constants, variables, literals, and expressions by including their values inside a string literal.
SET /A v_int = 7
SET v_str = get it done @
SET v_str1 = %v_str% %v_int% sharp!
echo %v_str1%

#String Concatenation
You can use the SET operator to concatenate two strings or a string and a character, or two characters. Following is a simple example which shows how to use string concatenation.

#String length
In DOS scripting, there is no length function defined for finding the length of a string. There are custom-defined functions which can be used for the same. Following is an example of a custom-defined function for seeing the length of a string.

#toInt
A variable which has been set as string using the set variable can be converted to an integer using the /A switch which is using the set variable. The following example shows how this can be accomplished.
#Align Right
This used to align text to the right, which is normally used to improve readability of number columns.
#Left String
This is used to extract characters from the beginning of a string.
#Mid String
This is used to extract a substring via the position of the characters in the string.
#Remove
The string substitution feature can also be used to remove a substring from another string.
#Remove Both Ends
This is used to remove the first and the last character of a string.
#Remove All Spaces
This is used to remove all spaces in a string via substitution.
#Replace a String
To replace a substring with another string use the string substitution feature.
#Right String
This is used to extract characters from the end of a string.
(:

:)kwd[enable delayed expansion]
#enabledelayedexpansion cause variables to be expanded at execution time rather than at parse time. 
(:

:)kwd[run batch file in powershell]
#you have to specify the directory even if you are in the current one.(example '.\file.bat')
(:

:)kwd[variables in batch]


REM=====================================================================
:: redirect all files in 'AGMLogs' folder into a text file
:: dir "C:\AGMLogs" > "C:\AGMLogs\tracker.txt"

REM=====================================================================
:: delete all the files and sub-directories in the directory
:: DEL . DR

REM=====================================================================
:: using cmd line arguments. maximum use is 10 agrguments with first 
:: argument %0 but you can use more than 10 arguments by using the 
:: command SHIFT.
:: echo %~n0 is run!
:: echo %1
:: echo %2
:: echo %3
:: echo %*

REM=====================================================================
:: using SET command to declare variables
:: variable scope are global by default in 
:: batch with variable accessible from the 
:: entire command prompt session.
:: but with SETLOCAL a variable scope is local 
:: and is reverted (destroyed) with script reaching 
:: the  EOF or calling EXIT command or ENDLOCAL command.
:: You can also use Environment or system Variables.

set v_msg="Happy Birthday Norah!"
echo %v_msg%
SET /A v_month = 07
SET /A v_day = 18
SET /A v_year = 2025
echo 'How old are now?'
echo 'hummm! I think 7'

SET /A v_magic_nbr = %v_month% + %v_day% + %v_year%
echo %v_magic_nbr%

echo "By the way  check this out!"

SET /A x = 10 
SET /A y = 15
SET /A z = %x% + %y%
echo %z%

SET /A z = %x% - %y%
::echo %z%

::SET /A z = %x% * %y%
::echo %z%

::SET /A z = %x% / %y%
::echo %z%

(:

:)kwd[batch array]
#use 'set' command to define array
Set v_my_array[0]=1 with '0' the index and '1' the value.
#array through 'list type' with values
Set list = 1 2 3 4
(for %%a in (%list%) do( echo %%a))

:block1
SET list= norah manuela amoussouga &
(for %%i in (%list%) do (echo %%i))
::pause
::GOTO :block2

:block2
for /l %%i in (0, 2, 100) do echo %%i
::exit /b

:block_accessing_array_element
set a[0]=1
set a[1]=2
set a[2]=3
echo %a[0]%
echo %a[1]%
echo %a[2]%


:block_itterate_over_array_elements
setlocal enabledelayedexpansion 
set a[0]=black 
set a[1]=blue 
set a[2]=beige 
set a[3]=brown     
set a[4]=olive
set a[5]=grey
set a[6]=navy
 

for /l %%n in (0,1,6) do ( 
   echo Suit !a[%%n]! 
)


::you can add/modify the array by incrementing 
::index or using exitent index and changing 
::the value of the element.
::`echo.` is for echoing a new line character in a file



(:


:)kwd[batch script examples]

@echo off

:)------------------------------------------------------(:
::function fun_str_length
@echo off
SET v_str= hello word
CALL :block_str-len v_str block_str-len
ECHO The string is %block_str-len% characters long
EXIT /b 

:block_str-len
SETLOCAL enabledelayedexpansion

:block_str-len-loop
if not "!%1:~%v_len%!"=="" SET /A v_len+= 1 & GOTO :block_str-len-loop
(endlocal & SET %2=%v_len%)
GOTO :EOF

:)-----------------------------------------------------(:
:)kwd[batch script, find computer and logoned user]
:: The below example is used to find computer and logged on users
ECHO OFF 
:: Windows version check 
IF NOT "%OS%"=="Windows_NT" GOTO Syntax 
ECHO.%* | FIND "?" >NUL 
:: Command line parameter check 
IF NOT ERRORLEVEL 1 GOTO Syntax
IF NOT [%2]==[] GOTO Syntax 
:: Keep variable local 
SETLOCAL 
:: Initialize variable 
SET WSS= 
:: Parse command line parameter 
IF NOT [%1]==[] FOR /F "tokens = 1 delims = \ " %%A IN ('ECHO.%~1') DO SET WSS = %%A 
:: Use NET VIEW and NBTSTAT to find computers and logged on users 
FOR /F "tokens = 1 delims = \ " %%a IN ('NET VIEW ^| FIND /I "\\%WSS%"') DO FOR /F 
"tokens = 1 delims = " %%A IN ('NBTSTAT -a %%a ^| FIND /I /V "%%a" ^| FIND 
"<03>"') DO ECHO.%%a %%A 
:: Done 
ENDLOCAL
GOTO:EOF 
:Syntax 
ECHO Display logged on users and their workstations. 
ECHO Usage: ACTUSR [ filter ] 
IF "%OS%"=="Windows_NT" ECHO Where: filter is the first part of the 
computer name^(s^) to be displayed
(:


:)------------------------------------------(:
::find the length of an array
@echo off

set a[0]=1
set a[1]=2
set a[2]=3
set a[3]=4
set "n=0"

:SymLoop

if defined a[%n%](
call echo %%a[%n%]%%
set /a "x+=1"
goto :SymLoop)
echo "The length of the array is %n%"


(:

:)[structure in batch]
@echo off 
set obj[0].Name=Joe 
set obj[0].ID=1 
set obj[1].Name=Mark 
set obj[1].ID=2 
set obj[2].Name=Mohan 
set obj[2].ID=3 
FOR /L %%i IN (0 1 2) DO  (
   call echo Name = %%obj[%%i].Name%%
   call echo Value = %%obj[%%i].ID%%
)
(:

















:)kwd[SECTION=BATCH](:

:)kwd[sources links batch]
https://www.tutorialspoint.com/batch_script/batch_script_strings.htm
batch related (https://www.wikihow.com/Delay-a-Batch-File)
(:

:)kwd[batch]
::Deletes all files in the current directory with prompt and warnings
::Hidden, System, and Read-only files are not affected.
::&commat; ECHO OFF with '@' for one line only or 
	@ECHO OFF for the entire file
	DEL . DR
(:

:)kwd[environment variable]
append the string 'C:\Application\bin' to the end of the system variable PATH.
(:

:)kwd[Batch commands]
#Batch Script commands
VER,
ASSOC,
VER
This batch command shows the version of MS-DOS you are using.
ASSOC
This is a batch command that associates an extension with a file type (FTYPE), displays existing associations, or deletes an association.
CD
This batch command helps in making changes to a different directory, or displays the current directory.
CLS
This batch command clears the screen.
COPY
This batch command is used for copying files from one location to the other.
DEL
This batch command deletes files and not directories.
DIR
This batch command lists the contents of a directory.
DATE
This batch command help to find the system date.
ECHO
This batch command displays messages, or turns command echoing on or off.
EXIT
This batch command exits the DOS console.
MD
This batch command creates a new directory in the current location.
MOVE
This batch command moves files or directories between directories.
PATH
This batch command displays or sets the path variable.
PAUSE
This batch command prompts the user and waits for a line of input to be entered.
PROMPT
This batch command can be used to change or reset the cmd.exe prompt.
RD
This batch command removes directories, but the directories need to be empty before they can be removed.
REN
Renames files and directories
REM
This batch command is used for remarks in batch files, preventing the content of the remark from being executed.
START
This batch command starts a program in new window, or opens a document.
TIME
This batch command sets or displays the time.
TYPE
This batch command prints the content of a file or files to the output.
VOL
This batch command displays the volume labels.
ATTRIB
Displays or sets the attributes of the files in the curret directory
CHKDSK
This batch command checks the disk for any problems.
CHOICE
This batch command provides a list of options to the user.
CMD
This batch command invokes another instance of command prompt.
COMP
This batch command compares 2 files based on the file size.
CONVERT
This batch command converts a volume from FAT16 or FAT32 file system to NTFS file system.
DRIVERQUERY
This batch command shows all installed device drivers and their properties.
EXPAND
This batch command extracts files from compressed .cab cabinet files.
FIND
This batch command searches for a string in files or input, outputting matching lines.
FORMAT
This batch command formats a disk to use Windows-supported file system such as FAT, FAT32 or NTFS, thereby overwriting the previous content of the disk.
HELP
This batch command shows the list of Windows-supplied commands.
IPCONFIG
This batch command displays Windows IP Configuration. Shows configuration by connection and the name of that connection.
LABEL
This batch command adds, sets or removes a disk label.
MORE
This batch command displays the contents of a file or files, one screen at a time.
NET
Provides various network services, depending on the command used.
PING
This batch command sends ICMP/IP "echo" packets over the network to the designated address.
SHUTDOWN
This batch command shuts down a computer, or logs off the current user.
SORT
This batch command takes the input from a source file and sorts its contents alphabetically, from A to Z or Z to A. It prints the output on the console.
SUBST
This batch command assigns a drive letter to a local folder, displays current assignments, or removes an assignment.
SYSTEMINFO
This batch command shows configuration of a computer and its operating system.
TASKKILL
This batch command ends one or more tasks.
TASKLIST
This batch command lists tasks, including task name and process id (PID).
XCOPY
This batch command copies files and directories in a more advanced way.
TREE
This batch command displays a tree of all subdirectories of the current directory to any level of recursion or depth.
FC
This batch command lists the actual differences between two files.
DISKPART
This batch command shows and configures the properties of disk partitions.
TITLE
This batch command sets the title displayed in the console window.
SET
Displays the list of environment variables on the current system.
(:

:)kwd[]
ASSOC | FIND .ext (displays only those file extensions which have the extension .ext)
#example:
&commat;echo off
assoc > C:\lists.txt
assoc | find .doc > C:\listsdoc.txt

<.ext>	Specifies the file name extension.
<filetype> Specifies the file type to associate with the specified file name extension.
/?	Displays help at the command prompt.

assoc [<.[ext]>[=[<filetype>]]]

To view the current file type association for the file name extension .txt, type:
assoc .txt

To remove the file type association for the file name extension .bak, type:
assoc .bak=
Make sure you add a space after the equal sign.

To view the output of assoc one screen at a time, type:
assoc | more

To send the output of assoc to the file assoc.txt, type:
assoc>assoc.txt

Associate .log to text files:
assoc .log=txtfile

Associate files with no extension to text files:
assoc .=txtfile
(:


:)kwd[Batch file]
#
(:


:)kwd[string manipulation in Batch file]
#Create String
A string can be created in DOS in the following way.
SET v_str= get it together!
echo %v_str%

#Empty String
SET v_empty_str= 

#String Interpolation
String interpolation is a way to construct a new String value from a mix of constants, variables, literals, and expressions by including their values inside a string literal.
SET /A v_int = 7
SET v_str = get it done @
SET v_str1 = %v_str% %v_int% sharp!
echo %v_str1%

#String Concatenation
You can use the SET operator to concatenate two strings or a string and a character, or two characters. Following is a simple example which shows how to use string concatenation.

#String length
In DOS scripting, there is no length function defined for finding the length of a string. There are custom-defined functions which can be used for the same. Following is an example of a custom-defined function for seeing the length of a string.

#toInt
A variable which has been set as string using the set variable can be converted to an integer using the /A switch which is using the set variable. The following example shows how this can be accomplished.
#Align Right
This used to align text to the right, which is normally used to improve readability of number columns.
#Left String
This is used to extract characters from the beginning of a string.
#Mid String
This is used to extract a substring via the position of the characters in the string.
#Remove
The string substitution feature can also be used to remove a substring from another string.
#Remove Both Ends
This is used to remove the first and the last character of a string.
#Remove All Spaces
This is used to remove all spaces in a string via substitution.
#Replace a String
To replace a substring with another string use the string substitution feature.
#Right String
This is used to extract characters from the end of a string.
(:

:)kwd[enable delayed expansion]
#enabledelayedexpansion cause variables to be expanded at execution time rather than at parse time. 
(:

:)kwd[run batch file in powershell]
#you have to specify the directory even if you are in the current one.(example '.\file.bat')
(:

:)kwd[variables in batch]


REM=====================================================================
:: redirect all files in 'AGMLogs' folder into a text file
:: dir "C:\AGMLogs" > "C:\AGMLogs\tracker.txt"

REM=====================================================================
:: delete all the files and sub-directories in the directory
:: DEL . DR

REM=====================================================================
:: using cmd line arguments. maximum use is 10 agrguments with first 
:: argument %0 but you can use more than 10 arguments by using the 
:: command SHIFT.
:: echo %~n0 is run!
:: echo %1
:: echo %2
:: echo %3
:: echo %*

REM=====================================================================
:: using SET command to declare variables
:: variable scope are global by default in 
:: batch with variable accessible from the 
:: entire command prompt session.
:: but with SETLOCAL a variable scope is local 
:: and is reverted (destroyed) with script reaching 
:: the  EOF or calling EXIT command or ENDLOCAL command.
:: You can also use Environment or system Variables.

set v_msg="Happy Birthday Norah!"
echo %v_msg%
SET /A v_month = 07
SET /A v_day = 18
SET /A v_year = 2025
echo 'How old are now?'
echo 'hummm! I think 7'

SET /A v_magic_nbr = %v_month% + %v_day% + %v_year%
echo %v_magic_nbr%

echo "By the way  check this out!"

SET /A x = 10 
SET /A y = 15
SET /A z = %x% + %y%
echo %z%

SET /A z = %x% - %y%
::echo %z%

::SET /A z = %x% * %y%
::echo %z%

::SET /A z = %x% / %y%
::echo %z%

(:

:)kwd[batch array]
#use 'set' command to define array
Set v_my_array[0]=1 with '0' the index and '1' the value.
#array through 'list type' with values
Set list = 1 2 3 4
(for %%a in (%list%) do( echo %%a))

:block1
SET list= norah manuela amoussouga &
(for %%i in (%list%) do (echo %%i))
::pause
::GOTO :block2

:block2
for /l %%i in (0, 2, 100) do echo %%i
::exit /b

:block_accessing_array_element
set a[0]=1
set a[1]=2
set a[2]=3
echo %a[0]%
echo %a[1]%
echo %a[2]%


:block_itterate_over_array_elements
setlocal enabledelayedexpansion 
set a[0]=black 
set a[1]=blue 
set a[2]=beige 
set a[3]=brown     
set a[4]=olive
set a[5]=grey
set a[6]=navy
 

for /l %%n in (0,1,6) do ( 
   echo Suit !a[%%n]! 
)


::you can add/modify the array by incrementing 
::index or using exitent index and changing 
::the value of the element.
::`echo.` is for echoing a new line character in a file



(:


:)kwd[batch script examples]

@echo off

:)------------------------------------------------------(:
::function fun_str_length
@echo off
SET v_str= hello word
CALL :block_str-len v_str block_str-len
ECHO The string is %block_str-len% characters long
EXIT /b 

:block_str-len
SETLOCAL enabledelayedexpansion

:block_str-len-loop
if not "!%1:~%v_len%!"=="" SET /A v_len+= 1 & GOTO :block_str-len-loop
(endlocal & SET %2=%v_len%)
GOTO :EOF

:)-----------------------------------------------------(:
:)kwd[batch script, find computer and logoned user]
:: The below example is used to find computer and logged on users
ECHO OFF 
:: Windows version check 
IF NOT "%OS%"=="Windows_NT" GOTO Syntax 
ECHO.%* | FIND "?" >NUL 
:: Command line parameter check 
IF NOT ERRORLEVEL 1 GOTO Syntax
IF NOT [%2]==[] GOTO Syntax 
:: Keep variable local 
SETLOCAL 
:: Initialize variable 
SET WSS= 
:: Parse command line parameter 
IF NOT [%1]==[] FOR /F "tokens = 1 delims = \ " %%A IN ('ECHO.%~1') DO SET WSS = %%A 
:: Use NET VIEW and NBTSTAT to find computers and logged on users 
FOR /F "tokens = 1 delims = \ " %%a IN ('NET VIEW ^| FIND /I "\\%WSS%"') DO FOR /F 
"tokens = 1 delims = " %%A IN ('NBTSTAT -a %%a ^| FIND /I /V "%%a" ^| FIND 
"<03>"') DO ECHO.%%a %%A 
:: Done 
ENDLOCAL
GOTO:EOF 
:Syntax 
ECHO Display logged on users and their workstations. 
ECHO Usage: ACTUSR [ filter ] 
IF "%OS%"=="Windows_NT" ECHO Where: filter is the first part of the 
computer name^(s^) to be displayed
(:


:)------------------------------------------(:
::find the length of an array
@echo off

set a[0]=1
set a[1]=2
set a[2]=3
set a[3]=4
set "n=0"

:SymLoop

if defined a[%n%](
call echo %%a[%n%]%%
set /a "x+=1"
goto :SymLoop)
echo "The length of the array is %n%"


(:

:)[structure in batch]
@echo off 
set obj[0].Name=Joe 
set obj[0].ID=1 
set obj[1].Name=Mark 
set obj[1].ID=2 
set obj[2].Name=Mohan 
set obj[2].ID=3 
FOR /L %%i IN (0 1 2) DO  (
   call echo Name = %%obj[%%i].Name%%
   call echo Value = %%obj[%%i].ID%%
)
(:


:)[SECTION=BASH](:
:)[]
sudo apt-get install bash 

bash --version
	checks if bash is installed 

sudo apt-get install bash
	use this command to install bash on ubuntu/Debian
brew install bash
	this is for macOs
#!/bin/bash
echo "Hello Bash! This is Amoussouga trying to learn you!"
	echo you can also write scripts(a list of commands) in a file with a .sh extension, save the file and run it.

(:















:)[SECTION=BASH](:
:)[]
sudo apt-get install bash 

bash --version
	checks if bash is installed 

sudo apt-get install bash
	use this command to install bash on ubuntu/Debian
brew install bash
	this is for macOs
#!/bin/bash
echo "Hello Bash! This is Amoussouga trying to learn you!"
	echo you can also write scripts(a list of commands) in a file with a .sh extension, save the file and run it.

(:


































